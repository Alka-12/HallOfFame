// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String    @id @default(cuid())
    name                 String?
    email                String?   @unique
    emailVerified        DateTime?
    image                String?
    password             String?   @db.Text
    course               String?
    branch               String?
    year                 String?
    bio                  String?
    setPublic            Boolean   @default(true)
    resetPasswordToken   String?
    resetPasswordExpires DateTime?
    accounts             Account[]
    sessions             Session[]
    posts                Post[]
    Like                 Like[]
    Comment              Comment[]
    followedBy           User[]    @relation("UserFollows")
    following            User[]    @relation("UserFollows")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id                     String    @id @default(cuid())
    imageurl               String    @db.Text
    title                  String
    createdAt              DateTime  @default(now())
    achievementDescription String    @db.Text
    category               String
    issuerOrganization     String
    issueDate              DateTime?
    tags                   String[]
    likescount             Int       @default(0)
    commentscount          Int       @default(0)
    public                 Boolean   @default(true)
    User                   User?     @relation(fields: [userId], references: [id])
    userId                 String?
    Like                   Like[]
    Comment                Comment[]
}

model Like {
    id     String @id @default(cuid())
    postId String
    userId String
    Post   Post   @relation(fields: [postId], references: [id])
    User   User   @relation(fields: [userId], references: [id])

    @@unique([postId, userId])
}

model Comment {
    id        String   @id @default(cuid())
    postId    String
    userId    String
    comment   String   @db.Text
    createdAt DateTime @default(now())
    Post      Post     @relation(fields: [postId], references: [id])
    User      User     @relation(fields: [userId], references: [id])
}
